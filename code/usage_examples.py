#!/usr/bin/env python3
"""
Modern Robotics Capstone Project - Usage Examples

This script demonstrates how to use the mobile manipulation software.
Run this from the project root directory.
"""

def main():
    print("Modern Robotics Capstone Project - Usage Examples")
    print("=" * 50)
    print()
    print("Generate complete submission package:")
    print("  python code/main.py")
    print("  python code/main.py submission")
    print()
    print("Run individual scenarios:")
    print("  python code/main.py best")
    print("  python code/main.py overshoot") 
    print("  python code/main.py newTask")
    print()
    print("Run all control modes:")
    print("  python code/main.py feedforward")
    print("  python code/main.py proportional")
    print("  python code/main.py feedforward_pi")
    print("  python code/main.py all")
    print()
    print("Run tests:")
    print("  python code/test.py")
    print("  python code/test.py tests/test_milestone4.py")
    print("  python code/test.py tests/test_milestone3.py")
    print("  python code/test.py tests/test_milestone2.py")
    print("  python code/test.py tests/test_milestone1.py")
    print("  python code/test.py --individual")
    print()
    print("Generate Milestone 1 CSV files for CoppeliaSim Scene 6:")
    print("  # Automated generation (recommended)")
    print("  python code/test.py tests/test_milestone1.py::test_generate_milestone1_outputs")
    print("  python code/test.py tests/test_milestone1.py::test_scene6_example_compatibility")
    print("  ")
    print("  # Manual generation with driver.py")
    print("  python -m code.driver milestone1/initial_config.csv output.csv \\")
    print("    --controls 10 10 10 10 0 0 0 0 0 --steps 100")
    print()
    print("Module usage examples:")
    print("  # Import trajectory generator")
    print("  from code.trajectory_generator import TrajectoryGenerator")
    print("  ")
    print("  # Import next state simulator")
    print("  from code.next_state import NextState")
    print("  ")
    print("  # Import feedback control")
    print("  from code.feedback_control import FeedbackControl")
    print("  ")
    print("  # Import complete capstone runner")
    print("  from code.run_capstone import run_capstone")
    print("  ")
    print("  # Import scenario functions")
    print("  from code.scenarios import (")
    print("      scenario_best, scenario_overshoot, scenario_new_task")
    print("  )")
    print()
    print("Project structure:")
    print("  code/main.py               - Unified command-line interface")
    print("  code/test.py               - Test runner (pytest & individual modes)")
    print("  code/                      - Core implementation modules")
    print("  code/tests/                - Comprehensive test suite")
    print("  results/                   - Generated result files")
    print("  requirements.txt           - Python dependencies")

if __name__ == "__main__":
    main()
